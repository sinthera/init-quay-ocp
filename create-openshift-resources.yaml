  - name: Cluster log in (obtain access token)
    redhat.openshift.openshift_auth:
      username: "{{ ocp_username }}"
      password: "{{ ocp_password }}"
      host: "{{ cluster.api_url }}"
      verify_ssl: false
    register: k8s_auth_results
    
  - name: Set the OCP API token value
    set_fact:
      token: "{{ k8s_auth_results.k8s_auth.api_key }}"
    no_log: true

  - name: Create an OCP project
    redhat.openshift.k8s:
      state: present
      host: "{{ cluster.api_url }}"
      api_key: "{{ token }}"
      verify_ssl: false
      resource_definition:
        apiVersion: v1
        kind: Namespace
        metadata:
          name: "{{ project }}"
          labels:
            argocd.argoproj.io/managed-by: "{{ (gitops == 'yes') | ternary('openshift-gitops', omit) }}"

  - name: Assign admin permission to svil users
    redhat.openshift.k8s:
      host: "{{ cluster.api_url }}"
      api_key: "{{ token }}"
      verify_ssl: false
      state: present
      definition: "{{ lookup('template', './templates/rb_admin-users.yaml.j2') | from_yaml }}"
    when: cluster.name == 'svil'

  - name: Create resource quota
    redhat.openshift.k8s:
      host: "{{ cluster.api_url }}"
      api_key: "{{ token }}"
      verify_ssl: false
      state: present
      definition: "{{ lookup('template', './templates/rq_resource-quota.yaml.j2') | from_yaml }}"

  
  # Create the secret to pull from quay
  - name: Set secretData
    ansible.builtin.set_fact:
      secret_stringData: "{{ {'auths': { quay_host: { 'auth': robotaccount_token, 'email': '' }}} }}"

  - name: Print the gateway for each host when defined
    ansible.builtin.debug:
      msg: auth var {{ secret_stringData }}
      verbosity: 1
 
  - name: Create the dockerconfigjson secret into the project
    redhat.openshift.k8s:
      state: present
      host: "{{ cluster.api_url }}"
      api_key: "{{ token }}"
      verify_ssl: false
      resource_definition:
        apiVersion: v1
        kind: Secret
        metadata:
          name: "{{project}}-openshiftpuller-pull-secret"
          namespace: "{{ project }}"
        data:
          .dockerconfigjson: "{{ secret_stringData | to_json | b64encode }}"
        type: kubernetes.io/dockerconfigjson
